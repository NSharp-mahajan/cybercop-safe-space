import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { FileText, Download, Languages, Calendar, User, Mail, Phone, MapPin } from "lucide-react";
import { useToast } from "@/hooks/use-toast";

const FirGenerator = () => {
  const { toast } = useToast();
  const [language, setLanguage] = useState("english");
  const [formData, setFormData] = useState({
    fullName: "",
    phoneNumber: "",
    email: "",
    address: "",
    incidentDate: "",
    incidentTime: "",
    incidentLocation: "",
    incidentType: "",
    incidentDescription: "",
    evidenceDescription: "",
  });

  const incidentTypes = [
    "Online Fraud/Scam",
    "Identity Theft",
    "Cyberbullying",
    "Phishing",
    "Ransomware Attack",
    "Data Breach",
    "Social Media Harassment",
    "Banking Fraud",
    "Email Hacking",
    "Other",
  ];

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const generateFIR = () => {
    // Basic validation
    const requiredFields = ['fullName', 'phoneNumber', 'email', 'incidentDate', 'incidentType', 'incidentDescription'];
    const missingFields = requiredFields.filter(field => !formData[field as keyof typeof formData]);
    
    if (missingFields.length > 0) {
      toast({
        title: "Missing Information",
        description: "Please fill in all required fields marked with *",
        variant: "destructive"
      });
      return;
    }

    // Generate FIR content
    const firContent = generateFIRContent();
    
    // Create and download file
    const blob = new Blob([firContent], { type: 'text/plain' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `FIR_${formData.fullName.replace(/\s+/g, '_')}_${formData.incidentDate}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);

    toast({
      title: "FIR Generated Successfully",
      description: "Your First Information Report has been downloaded.",
    });
  };

  const generateFIRContent = () => {
    const currentDate = new Date().toLocaleDateString('en-IN');
    
    return `
FIRST INFORMATION REPORT (F.I.R.)
Generated by CyberCop - Digital Security Platform
Date of Report: ${currentDate}

===============================================
COMPLAINANT DETAILS
===============================================
Full Name: ${formData.fullName}
Phone Number: ${formData.phoneNumber}
Email Address: ${formData.email}
Address: ${formData.address || 'Not provided'}

===============================================
INCIDENT DETAILS  
===============================================
Date of Incident: ${formData.incidentDate}
Time of Incident: ${formData.incidentTime || 'Not specified'}
Location of Incident: ${formData.incidentLocation || 'Not specified'}
Type of Incident: ${formData.incidentType}

===============================================
INCIDENT DESCRIPTION
===============================================
${formData.incidentDescription}

===============================================
EVIDENCE DETAILS
===============================================
${formData.evidenceDescription || 'No evidence details provided'}

===============================================
DECLARATION
===============================================
I hereby declare that the information provided above is true to the best of my knowledge and belief. I understand that providing false information is a punishable offense under the law.

Complainant Signature: ___________________
Date: ${currentDate}

===============================================
FOR OFFICIAL USE ONLY
===============================================
FIR Number: [To be filled by authorities]
Police Station: [To be filled by authorities]  
Investigating Officer: [To be filled by authorities]
Date of Registration: [To be filled by authorities]

Note: This FIR template is generated by CyberCop platform. Please submit this to your nearest police station or cyber crime cell for official registration.
`;
  };

  return (
    <div className="min-h-screen py-12 px-4">
      <div className="container mx-auto max-w-4xl">
        {/* Header */}
        <div className="text-center mb-12">
          <div className="flex justify-center mb-4">
            <div className="p-4 rounded-full bg-primary/10 glow-primary">
              <FileText className="h-12 w-12 text-primary" />
            </div>
          </div>
          <h1 className="text-4xl md:text-5xl font-bold mb-4">
            <span className="gradient-primary bg-clip-text text-transparent">FIR Generator</span>
          </h1>
          <p className="text-xl text-muted-foreground max-w-2xl mx-auto">
            Generate a comprehensive First Information Report for cybersecurity incidents
          </p>
        </div>

        {/* Language Selector */}
        <Card className="mb-8 border-border/40">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Languages className="h-5 w-5 text-primary" />
              Language Selection
            </CardTitle>
            <CardDescription>
              Choose your preferred language for the FIR document
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="flex gap-4">
              <Button 
                variant={language === "english" ? "default" : "outline"}
                onClick={() => setLanguage("english")}
                className="transition-glow hover:glow-primary"
              >
                English
              </Button>
              <Button 
                variant={language === "hindi" ? "default" : "outline"}
                onClick={() => setLanguage("hindi")}
                className="transition-glow hover:glow-primary"
                disabled
              >
                हिंदी (Coming Soon)
              </Button>
            </div>
          </CardContent>
        </Card>

        {/* FIR Form */}
        <Card className="border-border/40">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <User className="h-5 w-5 text-primary" />
              Incident Report Form
            </CardTitle>
            <CardDescription>
              Fill in the details below to generate your FIR document
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            {/* Personal Information */}
            <div className="space-y-4">
              <h3 className="text-lg font-semibold text-primary">Personal Information</h3>
              
              <div className="grid md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="fullName" className="flex items-center gap-2">
                    <User className="h-4 w-4" />
                    Full Name *
                  </Label>
                  <Input
                    id="fullName"
                    placeholder="Enter your full name"
                    value={formData.fullName}
                    onChange={(e) => handleInputChange('fullName', e.target.value)}
                    className="transition-glow focus:glow-primary"
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="phoneNumber" className="flex items-center gap-2">
                    <Phone className="h-4 w-4" />
                    Phone Number *
                  </Label>
                  <Input
                    id="phoneNumber"
                    placeholder="+91 XXXXXXXXXX"
                    value={formData.phoneNumber}
                    onChange={(e) => handleInputChange('phoneNumber', e.target.value)}
                    className="transition-glow focus:glow-primary"
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="email" className="flex items-center gap-2">
                    <Mail className="h-4 w-4" />
                    Email Address *
                  </Label>
                  <Input
                    id="email"
                    type="email"
                    placeholder="your.email@example.com"
                    value={formData.email}
                    onChange={(e) => handleInputChange('email', e.target.value)}
                    className="transition-glow focus:glow-primary"
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="address" className="flex items-center gap-2">
                    <MapPin className="h-4 w-4" />
                    Address
                  </Label>
                  <Input
                    id="address"
                    placeholder="Your complete address"
                    value={formData.address}
                    onChange={(e) => handleInputChange('address', e.target.value)}
                    className="transition-glow focus:glow-primary"
                  />
                </div>
              </div>
            </div>

            {/* Incident Information */}
            <div className="space-y-4">
              <h3 className="text-lg font-semibold text-primary">Incident Information</h3>
              
              <div className="grid md:grid-cols-3 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="incidentDate" className="flex items-center gap-2">
                    <Calendar className="h-4 w-4" />
                    Date of Incident *
                  </Label>
                  <Input
                    id="incidentDate"
                    type="date"
                    value={formData.incidentDate}
                    onChange={(e) => handleInputChange('incidentDate', e.target.value)}
                    className="transition-glow focus:glow-primary"
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="incidentTime">Time of Incident</Label>
                  <Input
                    id="incidentTime"
                    type="time"
                    value={formData.incidentTime}
                    onChange={(e) => handleInputChange('incidentTime', e.target.value)}
                    className="transition-glow focus:glow-primary"
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="incidentType">Type of Incident *</Label>
                  <Select value={formData.incidentType} onValueChange={(value) => handleInputChange('incidentType', value)}>
                    <SelectTrigger className="transition-glow focus:glow-primary">
                      <SelectValue placeholder="Select incident type" />
                    </SelectTrigger>
                    <SelectContent>
                      {incidentTypes.map((type) => (
                        <SelectItem key={type} value={type}>{type}</SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="incidentLocation">Location of Incident</Label>
                <Input
                  id="incidentLocation"
                  placeholder="Where did the incident occur?"
                  value={formData.incidentLocation}
                  onChange={(e) => handleInputChange('incidentLocation', e.target.value)}
                  className="transition-glow focus:glow-primary"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="incidentDescription">Detailed Description of Incident *</Label>
                <Textarea
                  id="incidentDescription"
                  placeholder="Provide a detailed description of what happened, including timeline, people involved, and any other relevant information..."
                  value={formData.incidentDescription}
                  onChange={(e) => handleInputChange('incidentDescription', e.target.value)}
                  className="min-h-[120px] transition-glow focus:glow-primary"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="evidenceDescription">Evidence Details</Label>
                <Textarea
                  id="evidenceDescription"
                  placeholder="Describe any evidence you have (screenshots, messages, documents, etc.)"
                  value={formData.evidenceDescription}
                  onChange={(e) => handleInputChange('evidenceDescription', e.target.value)}
                  className="min-h-[80px] transition-glow focus:glow-primary"
                />
              </div>
            </div>

            {/* Generate Button */}
            <div className="pt-6 border-t border-border/40">
              <div className="flex flex-col sm:flex-row gap-4 justify-center">
                <Button
                  onClick={generateFIR}
                  size="lg"
                  className="glow-primary transition-glow"
                >
                  <Download className="mr-2 h-5 w-5" />
                  Generate & Download FIR
                </Button>
                <Badge variant="secondary" className="self-center">
                  * Required fields
                </Badge>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

export default FirGenerator;